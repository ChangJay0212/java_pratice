### Java Thread (多執行緒) 筆記

在傳統的程式中，程式碼是循序執行的，一次只做一件事。多執行緒 (Multithreading) 允許程式同時執行多個任務，就像一個進程 (Process) 中有多個獨立的執行流程。

#### 1. 為什麼需要多執行緒？

- **提升效能**：在多核心 CPU 上，可以真正地平行處理任務，加快運算速度。
- **改善使用者體驗**：避免因耗時操作（如網路請求、檔案讀寫）而導致主畫面卡住 (UI Freeze)。
- **資源共享**：同一個進程中的多個執行緒可以共享記憶體空間（如物件、變數），溝通方便。

#### 2. 如何建立執行緒？

有兩種主要方式：

- **方法一：繼承 `Thread` 類別**
  1. 建立一個新的類別繼承 `java.lang.Thread`。
  2. 覆寫 (Override) `run()` 方法，將要執行的任務寫在裡面。
  3. 建立該類別的實例，並呼叫 `start()` 方法來啟動執行緒 (注意：不是直接呼叫 `run()`)。

- **方法二：實作 `Runnable` 介面 (推薦)**
  1. 建立一個新的類別實作 `java.lang.Runnable` 介面。
  2. 實作 `run()` 方法。
  3. 建立 `Thread` 物件，並將 `Runnable` 的實例作為參數傳入建構子。
  4. 呼叫 `Thread` 物件的 `start()` 方法。

**為什麼推薦 `Runnable`？**
因為 Java 不支援多重繼承，如果你的類別已經繼承了另一個類別，就無法再繼承 `Thread`。實作介面則沒有這個限制，更具彈性。

#### 3. 執行緒的生命週期

一個執行緒從建立到結束會經過幾個狀態：
1. **New (新增)**：剛建立，尚未啟動。
2. **Runnable (可執行)**：呼叫 `start()` 後，等待 CPU 分配時間。
3. **Running (執行中)**：CPU 正在執行此執行緒的程式碼。
4. **Blocked/Waiting (阻塞/等待)**：因某些原因暫停，例如等待 I/O、呼叫 `sleep()`、等待鎖 (Lock)。
5. **Terminated (終止)**：`run()` 方法執行完畢或因例外而結束。

#### 4. `Thread.sleep()`

- `Thread.sleep(milliseconds)` 是一個靜態方法，可以讓「當前」正在執行的執行緒暫停指定的毫秒數。這是一個簡單的控制執行緒執行順序的方式。

---

### 範例重點

- `App.java` 程式碼將會示範：
  1. 透過「繼承 `Thread`」建立並啟動一個執行緒 (`MyThread`)。
  2. 透過「實作 `Runnable`」建立並啟動另一個執行緒 (`MyRunnable`)。
  3. 主執行緒 (main thread) 與這兩個新建立的執行緒會並行執行。
  4. 使用 `Thread.sleep()` 來模擬耗時操作，並觀察執行緒之間的交錯執行情況。